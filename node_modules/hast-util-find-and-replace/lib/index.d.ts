/**
 * @param {Node} tree
 * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find
 * @param {Replace|Options} [replace]
 * @param {Options} [options]
 */
export function findAndReplace(
  tree: Node,
  find: Find | FindAndReplaceSchema | FindAndReplaceList,
  replace?: Replace | Options | undefined,
  options?: Options | undefined
): Node
export const defaultIgnore: string[]
export type Options = {
  ignore?: Test
}
export type Text = import('hast').Text
export type Parent = import('hast').Parent
export type Root = import('hast').Root
export type Element = import('hast').Element
export type Content = import('hast').Content
export type Node = Root | Content
export type Test = import('hast-util-is-element').Test
export type VisitorResult = import('unist-util-visit-parents').VisitorResult
export type RegExpMatchObject = {
  index: number
  input: string
  stack: [Root, ...Array<Element>, Text]
}
export type Find = string | RegExp
export type Replace = string | ReplaceFunction
export type FindAndReplaceTuple = [Find, Replace]
export type FindAndReplaceSchema = Record<string, Replace>
export type FindAndReplaceList = Array<[Find, Replace]>
export type Pair = [RegExp, ReplaceFunction]
export type Pairs = Array<[RegExp, ReplaceFunction]>
export type ReplaceFunction = (
  ...parameters: any[]
) => Array<Content> | Content | string | false | undefined | null
